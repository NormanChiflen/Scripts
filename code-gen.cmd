REM http://devio.wordpress.com/2009/10/15/code-generation-with-powershell-and-tfs/
REM Code Generation with PowerShell and TFS
REM If you use PowerShell to automatically generate code for your project (e.g. during the build process) and you work in TFS-based code, you need to check out existing files before overwriting them. Otherwise the files are read-only and/or not stored in TFS after code generation.
REM The PowerShell stub script to handle this situation looks like this (assuming the .ps1 file is also inside a TFS directory):

REM $scriptdir = Split-Path -Path $MyInvocation.MyCommand.Definition -Parent
REM $basepath = $scriptdir.Substring(0, $scriptdir.Length - "path\from\tfs-base\to\script".Length)
REM $scriptdir stores the directory name of the currently executed script. If the script file is stored inside your TFS project, you can calculate the file path to checkout from $scriptdir.

REM rem Next, we call TFS checkout, generate code, and check in again:
REM & .\tf-checkout.cmd $basepath
REM ... Code generation is here ...
REM & .\tf-checkin.cmd $basepathtf-checkout.cmd needs to set the Visual Studio environment variables (as in Visual Studio Command Prompt) to execute the “tf checkout” command:

@echo off
setlocal
call "c:\Program Files\Microsoft Visual Studio 9.0\VC\vcvarsall.bat" x86

echo.
echo checking out...

tf checkout %1path\to\file1.cs
tf checkout %1path\to\file2.cs
...

endlocaltf-checkin.cmd looks similar:

@echo off
setlocal
call "c:\Program Files\Microsoft Visual Studio 9.0\VC\vcvarsall.bat" x86

echo.
echo checking in...

tf checkin /comment:autogenerated /noprompt %1path\to\file1.cs
tf checkin /comment:autogenerated /noprompt %1path\to\file2.cs

endlocal
