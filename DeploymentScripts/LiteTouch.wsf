<job id="LiteTouch">
   <script language="VBScript" src="ZTIUtility.vbs"/>
   <script language="VBScript">

' // ***************************************************************************
' // 
' // Copyright (c) Microsoft Corporation.  All rights reserved.
' // 
' // Microsoft Deployment Toolkit Solution Accelerator
' //
' // File:      Litetouch.wsf
' // 
' // Version:   5.1.1642.01
' // 
' // Purpose:   Drive the lite touch deployment process
' // 
' // Usage:     cscript LiteTouch.wsf [/debug:true]
' // 
' // ***************************************************************************

Option Explicit
Dim oLiteTouch
Dim iScriptRC

If not oUtility.Arguments.Exists("DebugCapture") Then
	On Error Resume Next
End If

Set oLiteTouch = new Litetouch
TestAndFail SUCCESS, 5400, "Create object: Set oLiteTouch = New Litetouch"

iScriptRc =  oLiteTouch.Main
If iScriptRc <> SUCCESS then
	'Do not call ProcessResults if the results were successful, oLiteTouch may have cleaned the log.
	ProcessResults iScriptRc
End if

Wscript.quit iScriptRc


'//----------------------------------------------------------------------------
'//  Global Constants
'//----------------------------------------------------------------------------


'//----------------------------------------------------------------------------
'//  Main Class
'//----------------------------------------------------------------------------


Class Litetouch


	'//----------------------------------------------------------------------------
	'//  Class instance variable declarations
	'//----------------------------------------------------------------------------


	'//----------------------------------------------------------------------------
	'//  Constructor to initialize needed global objects
	'//----------------------------------------------------------------------------

	Private Sub Class_Initialize

	End Sub

	Function Main
		Dim iRetVal
		Dim oLink
		Dim sCmd
		Dim sBootstrap, sTSPath, sFile
		Dim i
		Dim oDrive
		Dim oShellApp
		Dim bTSInProgress
		Dim sSource
		Dim bIsAdmin
		Dim oAssocs
		Dim oAssoc
		Dim bFoundMedia
		Dim sPlat
		Dim sProcessorArchitecture
		Dim bIsOEM
		Dim sFinishAction
		Dim oTS

		iRetVal = Success


		'See if we can clean up

		' If in PE, make sure the C: drive is a fixed disk.  Otherwise, on a computer
		' with no existing partitions on the first disk, the CD or USB drive can become C:.
		' That causes issues when we later want to create a C: partition.

		If oEnv("SystemDrive") = "X:" and oFSO.DriveExists("C:") then

			' If the C: drive is removable, move it

			If oFSO.GetDrive("C:").DriveType <> 2 then

				MoveCDrive
				
			End if
			
			'Set the Task Sequence Temp files to the C: drive 
			If oEnvironment.Item("PHASE") = "" Then
				oEnvironment.Item("SMSTSLocalDataDrive") = "C:"
			End If
	

		End if


		' See if there is an in-progress task sequence

		bTSInProgress = False
		For each oDrive in oUtility.GetAllFixedDrives(false)

				If oFSO.FileExists(oDrive & "\_SMSTaskSequence\TSEnv.dat") then
				
					oLogging.CreateEntry "Found existing task sequence state information in " & oDrive & "\_SMSTaskSequence, will continue", LogTypeInfo
					bTSInProgress = True
					Exit For
					
				End if

		Next
		
		If not bTSInProgress then
		
			oLogging.CreateEntry "No task sequence is in progress.", LogTypeInfo
			
		End if


		If oUtility.Arguments.Exists("CleanStart") then

			oLogging.CreateEntry "This script was started from litetouch.vbs with the /CleanStart switch. Clean existing instances of MDT.", LogTypeInfo
			QuickCleanup
			bTSInProgress = False

		End if


		' Make sure there's no unattend.xml to get in the way if we're just getting started

		If not bTSInProgress then

			If oFSO.FileExists(oEnv("SystemDrive") & "\Windows\Panther\unattend\unattend.xml") then
			
				oLogging.CreateEntry "Removing old " & oEnv("SystemDrive") & "\Windows\Panther\unattend\unattend.xml", LogTypeInfo
				oFSO.DeleteFile oEnv("SystemDrive") & "\Windows\Panther\unattend\unattend.xml", true
				TestAndLog SUCCESS, "Removed " & oEnv("SystemDrive") & "\Windows\Panther\unattend\unattend.xml"
				
			End if

		End if

		'Set the Task Sequence Temp files to the C: drive 
		If oEnvironment.Item("PHASE") = "" Then
			oEnvironment.Item("SMSTSLocalDataDrive") = "C:"
		End If
	



		'//----------------------------------------------------------------------------
		'//  If starting in the new OS, create a shortcut to run once the shell starts
		'//----------------------------------------------------------------------------

		If oUtility.Arguments.Exists("start") then

			SetStartMDT
			If oFSO.FileExists(oEnv("SystemRoot") & "\Explorer.exe") then
				Main = Success
				Exit Function
			End If

		End if


		'//----------------------------------------------------------------------------
		'//  Set the deployment method
		'//----------------------------------------------------------------------------

		bFoundMedia = False
		For Each oDrive in oFSO.Drives

			If oDrive.IsReady then
			
				If oFSO.FileExists(oDrive.DriveLetter & ":\Deploy\Scripts\Media.tag") then
				
					bFoundMedia = True
					oEnvironment.Item("DeployRoot") = oDrive.DriveLetter & ":\Deploy"
					oEnvironment.Item("ResourceRoot") = oDrive.DriveLetter & ":\Deploy"
					oEnvironment.Item("DeploymentMethod") = "MEDIA"
					Exit For
					
				End if
				
			End if

		Next


		' If we already know we're doing a media deployment and we can't find the media,
		' prompt to have it reinserted

		If oEnvironment.Item("DeploymentMethod") = "MEDIA" and not bFoundMedia then

			bFoundMedia = False
			Do While not bFoundMedia

				oLogging.CreateEntry "Unable to find media, prompting to have it reinserted", LogTypeInfo
				oShell.Popup "Please reinsert the media (CD, DVD, or USB) needed to complete the deployment.", 0, "Media not found", 48

				For Each oDrive in oFSO.Drives

					If oDrive.IsReady then
					
						If oFSO.FileExists(oDrive.DriveLetter & ":\Deploy\Scripts\Media.tag") then
						
							bFoundMedia = True
							oEnvironment.Item("DeployRoot") = oDrive.DriveLetter & ":\Deploy"
							oEnvironment.Item("ResourceRoot") = oDrive.DriveLetter & ":\Deploy"
							oEnvironment.Item("DeploymentMethod") = "MEDIA"
							
							Exit For
						End if
					End if

				Next

			Loop

		End if


		' If no media found and we don't know the deployment method, it must be UNC.

		If oEnvironment.Item("DeploymentMethod") = "" then
		
			oEnvironment.Item("DeploymentMethod") = "UNC"
			
		End if

		oLogging.CreateEntry "DeploymentMethod = " & oEnvironment.Item("DeploymentMethod"), LogTypeInfo


		'//----------------------------------------------------------------------------
		'//  Find the "real" DeployRoot
		'//----------------------------------------------------------------------------

		If oEnvironment.Item("DeploymentMethod") = "UNC" then

			'//
			'//  If there were any "saved" network settings. Restore them now.
			'//
			If isNumeric(oEnvironment.Item("OSDAdapterCount")) then
			
				If Cint(oEnvironment.Item("OSDAdapterCount")) > 0 then
				
					sCmd = "wscript.exe """ & oUtility.ScriptDir & "\ZTINicConfig.wsf"" /RestoreWithinWinPE"
					iRetVal = RunAndLog(sCmd, true)
					TestAndLog iRetVal,"Excution: " & sCmd
					
				End if
				
			End if

			' Set the DeployRoot based on where we were started from

			If oEnvironment.Item("DeployRoot") = "" then
			
				oEnvironment.Item("DeployRoot") = oFSO.GetParentFolderName(oUtility.ScriptDir)
				
			End if

			ValidateDeployRootWithRecovery

		End if
		
		oLogging.CreateEntry "DeployRoot = " & oEnvironment.Item("DeployRoot"), LogTypeInfo


		oEnvironment.Item("DeployDrive") = oUtility.FindMappedDrive(oEnvironment.Item("DeployRoot"))
		oLogging.CreateEntry "DeployDrive = " & oEnvironment.Item("DeployDrive"), LogTypeInfo


		'//----------------------------------------------------------------------------
		'//  Gather information
		'//----------------------------------------------------------------------------


		' Set the phase if it isn't already set

		If oEnvironment.Item("PHASE") = "" then

			If oEnv("SystemDrive") = "X:" then  ' Running in PE
			
				oEnvironment.Item("PHASE") = "PREINSTALL"
				
				If oEnvironment.Item("DeploymentType") = "" then
				
					oEnvironment.Item("DeploymentType") = "NEWCOMPUTER"
					
				End if
				
			Else
			
				oEnvironment.Item("PHASE") = "VALIDATION"
				
			End if

		End if

		oLogging.CreateEntry "Phase = " & oEnvironment.Item("Phase"), LogTypeInfo


		' Do the full gathering process and display the wizard the first time, otherwise
		' just refresh the environment

		If (oEnvironment.Item("PHASE") = "VALIDATION") or (oEnvironment.Item("PHASE") = "PREINSTALL" and oEnvironment.Item("DeploymentType") = "NEWCOMPUTER") then

			' Process bootstrap rules

			sCmd = "wscript.exe """ & oUtility.ScriptDir & "\ZTIGather.wsf"" /inifile:Bootstrap.ini"
			iRetVal = RunAndLog(sCmd, true)
			TestAndLog iRetVal,"Running " & sCMD


			' Display the Welcome Wizard
			If oEnv("SystemDrive") = "X:" then  ' Running in PE

				If UCase(oEnvironment.Item("SkipBDDWelcome")) <> "YES" then

					If DisplayWelcomeWizard = FALSE then
					
						Cleanup
						oLogging.ReportFailure "All the wizard parameters are not set",5212
						
					End if

				ElseIf oEnvironment.Item("KeyboardLocalePE") <> "" then

					sCmd = right("0000" & Hex(GetLocale),4) & ":" & right("00000000" & Hex(GetLocale), 8)
					If UCase(oEnvironment.Item("KeyboardLocalePE")) <> UCase( sCmd ) then
					
						sCmd = "wpeutil.exe SetKeyboardLayout " & oEnvironment.Item("KeyboardLocalePE")
						RunAndLog sCmd, false
						
					End if

				End if

			End if


			'//
			'//  If there were any "saved" network settings. Restore them now.
			'//
			If isNumeric(oEnvironment.Item("OSDAdapterCount")) then
			
				If Cint(oEnvironment.Item("OSDAdapterCount")) > 0 then
				
					sCmd = "wscript.exe """ & oUtility.ScriptDir & "\ZTINicConfig.wsf"" /RestoreWithinWinPE"
					iRetVal = RunAndLog(sCmd, true)
					TestAndLog iRetVal,"Excution: " & sCmd
					
				End if
				
			End if

			' Validate connection (if DeployRoot has changed)
			ValidateDeployRootWithRecovery


			' Validate we are running as an administrator

			On error resume next
			bIsAdmin = oUtility.BDDUtility.IsAdmin
			On error goto 0

			If oEnv("SystemDrive") = "X:" then  ' Running in PE
			
				' OK if running within WinPE
				
			ElseIf isempty(bIsAdmin) then
			
				' BDDUtility not found, default to OK
				
			ElseIf bIsAdmin = FALSE then

				oShell.Popup "You must be running with Administrator rights.  The deployment cannot proceed.", 0, "Wizard Error", 16
				oLogging.ReportFailure "The logged-on user does not have Administrator rights.", 5204

			End if


			' Process full rules.  If DeployRoot is blank or still pointing to PE, this is optional.

			If Left(UCase(oEnvironment.Item("DeployRoot")), 3) = "X:\" or oEnvironment.Item("DeployRoot") = "" then
				sCmd = "wscript.exe """ & oUtility.ScriptDir & "\ZTIGather.wsf"" /nolocalonly /optional"
			Else
				sCmd = "wscript.exe """ & oUtility.ScriptDir & "\ZTIGather.wsf"" /nolocalonly"
			End if
			iRetVal = RunAndLog(sCmd, true)
			TestAndLog iRetVal, "Running " & sCMD


			' Validate connection (if DeployRoot has changed)
			ValidateDeployRootWithRecovery


			' If a task sequence ID was set, populate the other properties

			If oEnvironment.Item("TaskSequenceID") <> "" then
			
				oUtility.SetTaskSequenceProperties Ucase(oEnvironment.Item("TaskSequenceID"))
				
			End if


			' Display the wizard (unless skipped)

			If UCase(oEnvironment.Item("SkipWizard")) <> "YES" then

				sCmd = "MSHTA.exe """ & oUtility.ScriptDir & "\Wizard.hta"" /definition:DeployWiz_Definition_ENU.xml"
				iRetVal = RunAndLog(sCmd, true)
				TestAndLog iRetVal, "Running " & sCMD

				' Make sure the wizard completed

				If oEnvironment.Item("WizardComplete") <> "Y" then
					oShell.Popup "The Deployment Wizard was cancelled or did not complete successfully.  The deployment will not proceed.", 0, "Wizard Error", 16
					Cleanup
					oLogging.ReportFailure "The Deployment Wizard was cancelled or did not complete successfully.  The deployment will not proceed.", 5206
					
				End if


			End if


			' Validate connection (if DeployRoot has changed)
			ValidateDeployRootWithRecovery


			' Ensure the properties that should have been set by the wizard are actually set

			If oEnvironment.Item("DeploymentType") = "" then
				oLogging.CreateEntry "DeploymentType is not set. Must set some value for SkipWizard." , LogTypeError
				Cleanup
				oLogging.ReportFailure "DeploymentType is not set. Must set some value for SkipWizard.", 5208
				
			End if
			
			If oEnvironment.Item("DestinationDisk") = "" and oEnvironment.Item("DestinationPartition") = "" and oEnvironment.Item("TaskSequenceID") <> "" then

				oLogging.CreateEntry "DestinationDisk and DestinationPartition are not set, reading from TS.XML", LogTypeInfo

				Set oTS = oUtility.CreateXMLDOMObjectEx(oEnvironment.Item("DeployRoot") & "\Control\" & Ucase(oEnvironment.Item("TaskSequenceID")) & "\TS.xml")

				If not oTS.SelectSingleNode("//globalVarList/variable[@name='OSGUID']") is Nothing then
					oEnvironment.Item("DestinationDisk") = oUtility.SelectSingleNodeString(oTS,"//globalVarList/variable[@name='DestinationDisk']")
					oEnvironment.Item("DestinationPartition") = oUtility.SelectSingleNodeString(oTS,"//globalVarList/variable[@name='DestinationPartition']")
				End if
				
			End if

			If UCase(oEnvironment.Item("SkipWizard")) = "YES" and oEnvironment.Item("DeploymentType") <> "UPGRADE" then

				If oEnvironment.Item("JoinDomain") = "" and oEnvironment.Item("JoinWorkgroup") = "" then
				
					SetPropertyDefault "JoinWorkgroup", "WorkGroup", "Join basic workgroup"
					
				End if


				SetPropertyDefault "ComputerBackupLocation", "NONE", "Do not backup"
				SetPropertyDefault "UserDataLocation", "NONE", "Empty Strings break automation"
				SetPropertyDefault "TimeZoneName", "Pacific Standard Time", "Set TimeZone to some default"


				If oEnvironment.Item("JoinDomain") <> "" Then
				
					SetPropertyDefault "DomainAdmin", oEnvironment.Item("UserID"), "Use the credentials supplied for DomainJoin"
					SetPropertyDefault "DomainAdminDomain", oEnvironment.Item("UserDomain"), "Use the credentials supplied for DomainJoin"
					SetPropertyDefault "DomainAdminPassword", oEnvironment.Item("UserPassword"), "Use the credentials supplied for DomainJoin"
					
				End if

			End if


			' For the management pack, set OSDComputerName in some cases

			If Ucase(oEnvironment.Item("ComputerName")) <> "" AND Ucase(OEnvironment.Item("OSDComputerName")) = "" Then
				
				oEnvironment.Item("OSDComputerName") = oEnvironment.Item("ComputerName")
			End If
			
			If oEnvironment.Item("OSDComputerName") = "" Then
				If oUtility.ComputerName = "" Then
		
					If oEnvironment.Item("HostName") <> "" Then
						oEnvironment.Item("OSDComputerName") = oEnvironment.Item("HostName")
					Else
						oEnvironment.Item("OSDComputerName") = oENV("ComputerName")
					End If
				End If
			End If

			'Set the USMT TagFile if storing to a local drive
			If Mid(oEnvironment.Item("UserDataLocation"),2,1) = ":" Then

				Dim USMTTagFile
				On Error Resume Next
				If not oFSO.FileExists(Left(oEnvironment.Item("UserDataLocation"), 2) & "\UserState.tag") Then
					Set USMTTagFile = OFSO.CreateTextFile(Left(oEnvironment.Item("UserDataLocation"), 2) & "\UserState.tag", true)

					If Err Then
						oLogging.CreateEntry "Invalid UserDataLocation specified", LogTypeError
						Main = Failure
						Exit Function
					End If
					USMTTagFile.Close
				End If
			End If

		End if


		ValidateDeployRootWithRecovery


		oEnvironment.Item("DeployDrive") = oUtility.FindMappedDrive(oEnvironment.Item("DeployRoot"))
		oLogging.CreateEntry "DeployDrive = " & oEnvironment.Item("DeployDrive"), LogTypeInfo


		If oEnvironment.Item("ResourceRoot") = "" then
		
			oEnvironment.Item("ResourceRoot") = oEnvironment.Item("DeployRoot")
			
		Else
		
			oUtility.ValidateConnectionEx oEnvironment.Item("ResourceRoot"), True
			
		End if

		oLogging.CreateEntry "DeploymentType = " & oEnvironment.Item("DeploymentType"), LogTypeInfo
		oLogging.CreateEntry "ResourceRoot = " & oEnvironment.Item("ResourceRoot"), LogTypeInfo
		oEnvironment.Item("ResourceDrive") = oUtility.FindMappedDrive(oEnvironment.Item("ResourceRoot"))
		oLogging.CreateEntry "ResourceDrive = " & oEnvironment.Item("ResourceDrive"), LogTypeInfo

		'//----------------------------------------------------------------------------
		'//  Process the task sequence
		'//----------------------------------------------------------------------------


		' Set the task sequence name

		oEnvironment.Item("_SMSTSPackageName") = "Lite Touch Installation"
		oShell.Environment("PROCESS")("SEE_MASK_NOZONECHECKS") = 1

		' Verify the Processor_Architecture and replace if necessary.
		
		sProcessorArchitecture = oEnv("Processor_Architecture")
		If ucase(sProcessorArchitecture) = "AMD64" then
		
			sProcessorArchitecture = "x64"
			
		End if

		If ucase(oEnvironment.Item("Architecture")) <> ucase(sProcessorArchitecture) then
		
			oEnvironment.Item("Architecture") = sProcessorArchitecture
			
		End if

		' Set the script root path that should be used

		oEnv("ScriptRoot") = oEnvironment.Item("DeployRoot") & "\Scripts"
		oEnv("ToolRoot") = oEnvironment.Item("DeployRoot") & "\Tools\" & oEnvironment.Item("Architecture")

		' Copy the task sequencer files if they aren't already on the drive


		If oFSO.FileExists("X:\Deploy\Tools\" & oEnvironment.Item("Architecture") & "\TsmBootstrap.exe") then

			oLogging.CreateEntry "SMS Task Sequencer already found on X:\Deploy\Tools\" & oEnvironment.Item("Architecture"), LogTypeInfo
			sTSPath = "X:\Deploy\Tools\" & oEnvironment.Item("Architecture")

		ElseIf oFSO.FileExists(oUtility.LocalRootPath & "\Tools\" & oEnvironment.Item("Architecture") & "\TsmBootstrap.exe") then

			oLogging.CreateEntry "SMS Task Sequencer already found on " & oUtility.LocalRootPath & "\Tools\" & oEnvironment.Item("Architecture"), LogTypeInfo
			sTSPath = oUtility.LocalRootPath & "\Tools\" & oEnvironment.Item("Architecture")

		Else

			iRetVal = oUtility.FindFile("TsmBootstrap.exe", sBootstrap)
			If (iRetVal <> Success) then
				oShell.Popup "Unable to find the SMS Task Sequencer.  The deployment will not proceed.", 0, "Wizard Error", 16
				oLogging.ReportFailure "Unable to find the SMS Task Sequencer.  The deployment will not proceed.", 5208
			End if
			
			sSource = oFSO.GetParentFolderName(sBootstrap)
			sTSPath = oUtility.LocalRootPath & "\Tools\" & oEnvironment.Item("Architecture")
			oLogging.CreateEntry "SMS Task Sequencer found at " & sSource & ", copying to " & sTSPath, LogTypeInfo
			
			If Left(sTSPath, 2) <> "X:" then  ' Running from PE
			
				oUtility.VerifyPathExists sTSPath & "\00000409"
				
				For each sFile in Array("CcmCore.dll","CcmUtilLib.dll","Smsboot.exe","SmsCore.dll","TsCore.dll","TSEnv.exe","TsManager.exe","TsmBootstrap.exe","TsMessaging.dll","TsProgressUI.exe","TSResNlc.dll","xprslib.dll","00000409\tsres.dll")
				
					oLogging.CreateEntry "Copying " & sSource & "\" & sFile & " to " & sTSPath & "\" & sFile, LogTypeInfo
					oFSO.CopyFile sSource & "\" & sFile, sTSPath & "\" & sFile, true
					
				Next
				
			End if

		End if

		If not oFSO.FileExists(sTSPath & "\TS.XML") then

			' Copy the appropriate TS.XML file

			oLogging.CreateEntry "Copying " & oEnvironment.Item("DeployRoot") & "\Control\" & oEnvironment.Item("TaskSequenceID") & "\TS.XML to " & sTSPath, LogTypeInfo
			oFSO.CopyFile oEnvironment.Item("DeployRoot") & "\Control\" & oEnvironment.Item("TaskSequenceID") & "\TS.XML", sTSPath & "\TS.XML", true


			' Copy the VARIABLES.DAT to where the task sequence can find it

			If oFSO.FileExists(oEnvironment.PersistPath & "\" & oEnvironment.PersistFile) then
			
				oLogging.CreateEntry "Copying " & oEnvironment.PersistPath & "\" & oEnvironment.PersistFile & " to " & sTSPath & "\VARIABLES.DAT", LogTypeInfo
				oFSO.CopyFile oEnvironment.PersistPath & "\" & oEnvironment.PersistFile, sTSPath & "\VARIABLES.DAT", true
				
			End if


		End if
		
		' Ensure that this machine does *not* go to sleep while running the task sequence steps.

		On error resume next
		oUtility.BDDUtility.KeepAlive
		On error goto 0


		' Run the task sequence

		If bTSInProgress then
		
			'Set the Max SMSTS.LOG size
			ExtendSMSTSLogSize
			'Update the DestinationLogicalDrive Variable
			oUtility.DeterminePartition
			sCmd = """" & sTSPath & "\TsmBootstrap.exe"" /env:SAContinue"
			
		Else
		
			'Set the Max SMSTS.LOG size
			ExtendSMSTSLogSize		
			oLogging.CreateEvent 41016, LogTypeInfo, "LTI beginning deployment", Array(oEnvironment.Item("DeploymentType"), oEnvironment.Item("DeploymentMethod"))
			sCmd = """" & sTSPath & "\TsmBootstrap.exe"" /env:SAStart"
			
		End if

		iRetVal = RunAndLog(sCmd, false)
		
		' Reboot if requested

		If (iRetVal = -2147021886) then
		
			'Remove DestinationLogicalDrive variable
			oEnvironment.Item("DestinationLogicalDrive")=""
			oLogging.CreateEvent 41017, LogTypeInfo, "LTI initiating task sequence-requested reboot.", Array()
			If oEnvironment.Item("DeploymentType") = "CUSTOM" Then
			
				oEnvironment.Item("PHASE") = "CUSTOM"
				
			End If
			If oEnv("SystemDrive") = "X:" then

					If oEnvironment.Item("LTISuspend") = "True" then
						oShell.Popup "The task sequence has been suspended. Reboot WinPE (Close all windows) to resume.", 60, "Suspended", 48
					ElseIf oEnvironment.Item("LTISuspend") <> "" then
						oShell.Popup "The task sequence has been suspended." & VbNewLine & oEnvironment.Item("LTISuspend") & VbNewLine & "Reboot WinPE (Close all windows) to resume.", 60, "Suspended", 48
					End if
					WScript.Quit 0

			Else
				If oEnvironment.Item("BootPE") <> "True" then
					PopulateAutoAdminLogon
				End If
				If oEnvironment.Item("LTISuspend") = "" then
					If OEnvironment.Item("BootPE") <> "True" then
						SetStartMDT
					End If
					'Reset the variable
					oEnvironment.Item("BootPE") = ""
					Reboot
					WScript.Sleep 600000  ' Wait for the system to be rebooted out from under the script
				Else
					If oEnvironment.Item("LTISuspend") = "True" then
						oShell.Popup "The task sequence has been suspended.  Use the desktop shortcut to resume.", 60, "Suspended", 48
					Else
						oShell.Popup "The task sequence has been suspended." & VbNewLine & oEnvironment.Item("LTISuspend") & VbNewLine & "Use the desktop shortcut to resume.", 60, "Suspended", 48
					End if
					WScript.Quit 0
				End if
				
			End if

		Else ' Process is complete

			' Send an event

			If iRetVal = 0 then
			
				oLogging.CreateEvent 41015, LogTypeInfo, "LTI deployment completed successfully", Array("0")
				If ucase(oEnvironment.Item("_DoNotCleanLiteTouch")) = "TRUE" then
				
					bIsOEM = True
					oEnvironment.Item("SkipFinalSummary") = "YES"
					
				End if
				
			Else
			
				oLogging.CreateEvent 41014, LogTypeError, "Litetouch deployment failed, Return Code = " & PrnErrValue ( iRetval ), Array(CStr(iRetVal))
				oLogging.CreateEntry "For more information, consult the task sequencer log ...\SMSTS.LOG.", LogTypeInfo
				
			End if


			' Pass the return code to the wizard

			oEnvironment.Item("RetVal") = Trim(CStr(iRetVal))


			' Force cleanup up startup/AutoLogon before Summary Wizard Display

			CleanupStartItems


			' Display the final summary wizard (unless skipped)

			If UCase(oEnvironment.Item("SkipFinalSummary")) <> "YES" or iRetVal <> 0 then

				If UCase(oEnvironment.Item("IsServerCoreOS")) = "TRUE" then
					
					If iRetVal = 0 then
						
						oShell.Popup "Deployment completed successfully.  Review deployment logs for full details.", 0, "Successful Deployment", 64
							
					Else
						
						oShell.Popup "Deployment did not complete successfully.  Review deployment logs for full details.", 0, "Failed Deployment", 48
							
					End if
						
				Else
					
					sCmd = "MSHTA.exe """ & oUtility.ScriptDir & "\Wizard.hta"" /definition:Summary_Definition_ENU.xml"
						
					RunAndLog sCmd, true
						
				End if
					
			End If


			' Copy the logs

			oLogging.CopyLog


			' Save the finish action

			sFinishAction = oEnvironment.Item("FinishAction")


			' Clean up

			Cleanup


			' Exit if this is an OEM Copy.

			If bIsOEM = True then
			
				i = oShell.Popup ( "The OEM Image has been copied to the local machine. Now ready for replication." & _
					vbNewLine & vbNewLine & "Press OK (Enter) to shutdown (Default automatic shutdown in 20 minutes)." & _
					vbNewLine & "Press Cancel (Esc) to exit." , 20 * 60, "Finished!", vbOKCancel )
					
				If i <> vbCancel then
					Shutdown
				End if
				
				iRetVal = Failure
				
			End if


			' Process the finish action

			Select Case UCase(sFinishAction)
			Case "SHUTDOWN"
				Shutdown
			Case "RESTART", "REBOOT"
				Reboot
			Case "LOGOFF"
				Logoff
			End Select

		End if


		Main = iRetVal


	End Function


	Function RunAndLog(sCmd, bDebuggable)

		Dim iRetVal
		Dim iShow


		If oLogging.Debug and bDebuggable then
		
			sCmd = sCmd & " /debug:true"
			iShow = 1
			
		Else
		
			iShow = 0
			
		End if


		oLogging.CreateEntry "About to run command: " & sCmd, LogTypeInfo

		On Error Resume Next
		iRetVal = oShell.Run(sCmd, iShow, true)
		RunAndLog = iRetVal
		On Error Goto 0

	End Function


	Sub Reboot

		Dim o, oOS

		' Reboot

		If oEnv("SystemDrive") = "X:" then
			' Nothing to do, exiting will reboot
		Else
			Set oOS = GetObject("winmgmts:{(Shutdown)}//./root/cimv2").ExecQuery("select * from Win32_OperatingSystem where Primary=true")
			For Each o in oOS
				o.Win32Shutdown(6)
			Next
		End if

	End Sub


	Sub Shutdown

		Dim o, oOS

		' Shutdown

		If oEnv("SystemDrive") = "X:" then
			oShell.Run "WpeUtil.exe shutdown", 0, true
			WScript.Sleep 60000
		Else
			Set oOS = GetObject("winmgmts:{(Shutdown)}//./root/cimv2").ExecQuery("select * from Win32_OperatingSystem where Primary=true")
			For Each o in oOS
				o.Win32Shutdown(12)
			Next
		End if

	End Sub



	Sub Logoff

		Dim o, oOS

		' Logoff

		If oEnv("SystemDrive") = "X:" then
			' Logoff is impossible, just exit so it reboots
		Else
			Set oOS = GetObject("winmgmts:{(Shutdown)}//./root/cimv2").ExecQuery("select * from Win32_OperatingSystem where Primary=true")
			For Each o in oOS
				o.Win32Shutdown(4)
			
			Next
		End if

	End Sub


	Sub SetPropertyDefault ( Prop, Def, Notes )

		' When Skipping wizard pages, it is possible that some required properties are not set.

		If oEnvironment.Item( Prop ) = "" then

			oLogging.CreateEntry "Default Property Check (" & Notes & "): " & Prop & " = " & Def, LogTypeInfo
			oEnvironment.Item( Prop ) = Def

		End if

	End sub

	Sub CleanupStartItems

		' Clean up the run registry entry (if it exists)

		On Error Resume Next
		oShell.RegDelete "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run\LiteTouch"
		On Error Goto 0


		' Clean up the shortcut (if it exists)

		If oFSO.FileExists(oShell.SpecialFolders("AllUsersStartup") & "\LiteTouch.lnk") then
		
			oFSO.DeleteFile oShell.SpecialFolders("AllUsersStartup") & "\LiteTouch.lnk"
			
		End if

		On Error Resume Next
		
		oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\AutoAdminLogon", "0", "REG_SZ"
		
		On Error Goto 0

		oLogging.CreateEntry "CleanStartItems Complete", LogTypeInfo

	End Sub

	Sub QuickCleanup

		Dim sCmd
		Dim iRetVal
		Dim oDrive

		CleanupStartItems


		oLogging.CreateEntry "Removing " & oUtility.LocalRootPath & " folder (final log entry)", LogTypeInfo
		oFileHandling.RemoveFolderEx oUtility.LogPath, oLogging.Debug

		' Release our references to the task sequence environment (an issue for upgrades)

		On Error Resume Next
		oEnvironment.Release
		TestAndLog Success, "Releasing Environment"
		On Error Goto 0



		For each oDrive in oUtility.GetAllFixedDrives(false)
			If oFSO.FileExists(oDrive & "\_SMSTaskSequence\TSEnv.dat") then
				oFileHandling.RemoveFolderEx oDrive & "\_SMSTaskSequence", oLogging.Debug
			End if
		Next


	End sub


	Sub Cleanup

		Dim sCmd
		Dim iRetVal


		CleanupStartItems

		' Unregister TSCORE.DLL (workaround)

		If oFSO.FileExists(oUtility.LocalRootPath & "\Tools\" & oEnvironment.Item("Architecture") & "\TSCore.dll") then

			oLogging.CreateEntry "Unregistering TSCore.dll.", LogTypeInfo
			sCmd = "regsvr32 /u /s " & oUtility.LocalRootPath & "\Tools\" & oEnvironment.Item("Architecture") & "\TSCore.dll"
			iRetVal = oShell.Run(sCmd, 0, false)
			TestAndLog iRetVal, "Ran " & sCmd

		Else

			oLogging.CreateEntry "TSCore.dll not found, not unregistering.", LogTypeInfo

		End if


		' Release our references to the task sequence environment (an issue for upgrades)

		On Error Resume Next
		oEnvironment.Release
		TestAndLog Success, "Releasing Environment"
		On Error Goto 0


		' Run LTICleanup to clean up the rest

		sCmd = "wscript.exe """ & oUtility.ScriptDir & "\LTICleanup.wsf"""
		oLogging.CreateEntry "About to run command: " & sCmd, LogTypeInfo
		On Error Resume Next
		iRetVal = oShell.Run(sCmd, 0, true)

		On Error Goto 0

	End Sub

	Function ValidateDeployRootWithRecovery

		Dim sARF
		Dim sNetworkErrorHint
		DIm iRetVal
		Dim sLTISuspend

		If oUtility.ValidateConnection(oEnvironment.Item("DeployRoot")) = Success then
			ValidateDeployRootWithRecovery = SUCCESS
			exit function
		End if
		
		sNetworkErrorHint = vbNewLine & GetNetworkingErrorHint(oEnvironment.Item("DeployRoot"))
		oLogging.CreateEntry "Unable to connect to " & oEnvironment.Item("DeployRoot") & "." & sNetworkErrorHint, LogTypeError

		sARF = vbNewLine & vbNewLine & "Abort - Abort Litetouch and cleanup (No Recovery)."
		sARF =      sARF & vbNewLine & "Retry - Retry network operation."
		sARF =      sARF & vbNewLine & "Ignore - Cancel out of Litetouch (Retry later)."

		iRetVal = oShell.Popup( "A connection to the deployment share (" & oEnvironment.Item("DeployRoot") & ") could not be made. " & sNetworkErrorHint & sARF, 0, "Wizard Error", 16 + 2)
		If iRetVal = 3 then  ' Abort

			oLogging.CreateEntry "ValidateDeployRootWithRecovery: Abort", LogTypeInfo
			Cleanup
			oLogging.ReportFailure "ValidateDeployRootWithRecovery: Abort" , 5210

		ElseIf iRetVal = 4 then  ' Retry

			oLogging.CreateEntry "ValidateDeployRootWithRecovery: Retry", LogTypeInfo
			ValidateDeployRootWithRecovery

		ElseIf iRetVal = 5 then  ' Ignore
			
			oLogging.CreateEntry "ValidateDeployRootWithRecovery: Cancel (for now)...", LogTypeInfo
				
			If oEnv("SystemDrive") <> "X:" then
				iRetVal = oUtility.FindFile ( "LTISuspend.wsf", sLTISuspend )
				TestAndFail iRetVal, 10203, "FindFile(LTISuspend.wsf)"
				iRetVal = oUtility.RunWithHeartbeat ( "cscript.exe //nologo """ & sLTISuspend & """" )
				TestAndFail iRetVal, 10204, "Run Program " & sLTISuspend
			End if

			oLogging.ReportFailure "ValidateDeployRootWithRecovery: Cancel" , 5211

		End if

	End function

	Function DisplayWelcomeWizard

		Dim KeyboardLocale
		Dim sCmd


		'
		'  Run the Welcome Wizard
		'
		sCmd = "wpeutil.exe ListKeyboardLayouts " & GetLocale
		RunAndLog sCmd, false


		Do while TRUE

			KeyboardLocale = oEnvironment.Item("KeyboardLocalePE")

			sCmd = "MSHTA.exe " & oUtility.ScriptDir & "\Wizard.hta /definition:BDD_Welcome_ENU.xml"
			RunAndLog sCmd, true

			If oEnvironment.Item("WizardComplete") <> "Y" then

				' An abrubt termination of the Wizard means that the user has requested a reboot.

				WScript.Quit 0   ' Just exit so that PE reboots itself

			Else

				' Determine if the user selected a new Keyboard Locale!
				If KeyboardLocale = "" then
					KeyboardLocale = right("0000" & hex(GetLocale),4) & ":0000" & right("0000" & hex(GetLocale),4)
				End if

				If oEnvironment.Item("KeyboardLocalePE") <> KeyboardLocale then
					sCmd = "wpeutil.exe SetKeyboardLayout " & oEnvironment.Item("KeyboardLocalePE")
					RunAndLog sCmd, false
				End if


				' Run the Command:

				Select case ucase(oEnvironment.Item("WelcomeWizardCommand"))

				Case "RECOVERY"

					sCmd = "x:\sources\recovery\RecEnv.exe"
					RunAndLog sCmd, false

				Case "COMMANDPROMPT"

					DisplayWelcomeWizard = FALSE ' Break out of script, do not continue...
					Exit function

				Case else ' "DEPLOYWIZARD"

					DisplayWelcomeWizard = TRUE
					Exit function

				end select

			End if

		loop

	End function


	Function MoveCDrive

		Dim iRetVal
		Dim i
		Dim oDrive
		Dim sDrive
		Dim sFile
		Dim oFile


		' Find an available drive letter

		sDrive = ""
		For i = Asc("M") to Asc("Z")
			On Error Resume Next
			Set oDrive = oFSO.GetDrive(Chr(i))
			If Err then
				sDrive = Chr(i)
				Exit For
			End if
			
			On Error Goto 0
			
		Next

		If sDrive <> "" then

			' Write the diskpart script

			sFile = oEnv("TEMP") & "\LiteTouch_MoveC.txt"

			Set oFile = oFSO.CreateTextFile(sFile, True, False)
			oFile.WriteLine "select volume C:"
			oFile.WriteLine "Assign letter=" & sDrive
			oFile.Close


			' Execute diskpart.exe

			iRetVal = oShell.Run("cmd /c ""DISKPART.EXE /s """ & sFile & """""", 0, true)
			TestAndLog iRetVal, "Ran diskpart to change drive letter"

		Else
			oLogging.CreateEntry "ERROR - No drive letters are available to change removable drive C:", LogTypeError
		End if

	End Function


	Function GetNetworkingErrorHint(DeployRoot)
		dim DeployHost, i,j

		GetNetworkingErrorHint = ""

		On error resume next

		DeployHost = DeployRoot
		
		If instr(3,DeployRoot,"\",vbTextCompare) <> 0 then
		
			DeployHost = mid(DeployRoot,3,instr(3,DeployRoot,"\",vbTextCompare)-3)
			
		End if

		''''''''''''''''''''''''''''''''''''''''''''''''''''''

		If objWMI.ExecQuery("select * from win32_pingstatus where Address = '" & DeployHost & "' and ResponseTime <> NULL").Count > 0 then

			' Positive reply from DeployRoot Server
			GetNetworkingErrorHint = "Connection OK. Possible cause: invalid credentials."

		ElseIf objWMI.ExecQuery("select * from win32_NetworkAdapterconfiguration where DHCPServer <> NULL").Count > 0 then

			' DHCP OK, must be a network routing error or Virtual PC Configuraiton problem
			GetNetworkingErrorHint = "Can not reach DeployRoot. Possible cause: Network routing error or Network Configuration error."

		ElseIf objWMI.ExecQuery("select * from win32_NetworkAdapter where Installed = true and adaptertypeid = 0").Count > 0 then

			' There is a valid Networking device present, yet the DHCP address is bad.
			GetNetworkingErrorHint = "DHCP Lease was not obtained for any Networking device! Possible Cause: Check physical connection."

		Else

			For Each i in objWMI.InstancesOf("Win32_PnPEntity")

				For Each j in i.CompatibleID
					If ucase(right(j,8)) = "\CC_0200" then
					
						GetNetworkingErrorHint = "The following networking device did not have a driver installed."
						GetNetworkingErrorHint = GetNetworkingErrorHint & vbNewLine & i.HardwareID(0)
						exit function
						
					End if
					
				Next
				
			Next

			' Are you kidding me? THis is the 21st century, what kind of computer doesn't have a networking adatper?
			GetNetworkingErrorHint = "No networking devices were found on this machine!"

		End if

		on error goto 0

	End function

	Function PopulateAutoAdminLogon

		Dim iRetVal, colUserAccounts, oAccount,bAutoAdminLogon,AdminAccount
		On Error Resume Next
		bAutoAdminLogon = oShell.RegRead("HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\AutoAdminLogon")
		On Error Goto 0
		If bAutoAdminLogon = 0 then

			'Determine Local Administrator Account
			Set colUserAccounts = objWMI.ExecQuery("Select * From Win32_UserAccount where LocalAccount = TRUE")
			For each oAccount in colUserAccounts
				If Left(oAccount.SID, 6) = "S-1-5-" and Right(oAccount.SID, 4) = "-500" Then
					AdminAccount = oAccount.Name
				End iF
			Next
			iRetval = oShell.RegWrite("HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\AutoAdminLogon", 1, "REG_SZ")
			iRetval = oShell.RegWrite("HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\AutoLogonCount", 999, "REG_SZ")
			iRetval = oShell.RegWrite("HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\DefaultUserName", AdminAccount, "REG_SZ")

			iRetVal = oShell.RegWrite("HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\DefaultDomainName", ".", "REG_SZ")

			iRetval = oShell.RegWrite("HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\DefaultPassword", oEnvironment.Item("AdminPassword"), "REG_SZ")
			TestAndLog iRetVal, "Updated registry with AutoLogon"
			wscript.sleep 5000

		Else
		
			PopulateAutoAdminLogon = Success
			Exit Function
			
		End If

		PopulateAutoAdminLogon = Success

	End Function

	Sub SetStartMDT

		Dim oLink

		' Make sure the scripts are local

		If not oFSO.FileExists(oUtility.LocalRootPath & "\Scripts\LiteTouch.wsf") then

			' Run LTICopyScripts.wsf to copy the needed scripts locally
			oShell.Run "wscript.exe """ & oUtility.ScriptDir & "\LTICopyScripts.wsf""", 0, true

		End if


		' Set up to automatically run me, using the appropriate method

		If oFSO.FileExists(oEnv("SystemRoot") & "\Explorer.exe") then
            ' If shortcut for LiteTouch.wsf doesn't exist then create a new shortcut.
            If not oFSO.FileExists(oShell.SpecialFolders("AllUsersStartup") & "\LiteTouch.lnk") then
			    ' Not Server Core, create a shortcut
			    oLogging.CreateEntry "Creating startup folder item to run LiteTouch.wsf once the shell is loaded.", LogTypeInfo

			    Set oLink = oShell.CreateShortcut(oShell.SpecialFolders("AllUsersStartup") & "\LiteTouch.lnk")
			    oLink.TargetPath = "wscript.exe"
			    oLink.Arguments = """" & oUtility.LocalRootPath & "\Scripts\LiteTouch.wsf"""
			    oLink.Save

			    oLogging.CreateEntry "Shortcut """ & oShell.SpecialFolders("AllUsersStartup") & "\LiteTouch.lnk"" created.", LogTypeInfo
			Else
			     oLogging.CreateEntry "Shortcut """ & oShell.SpecialFolders("AllUsersStartup") & "\LiteTouch.lnk"" already exists.", LogTypeInfo
			End If

		Else

			' Server core, registry a "Run" item

			oLogging.CreateEntry "Creating Run registry key to run LiteTouch.wsf for subsequent reboots.", LogTypeInfo

			On Error Resume Next
			oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run\LiteTouch", "cscript.exe """ & oUtility.LocalRootPath & "\Scripts\LiteTouch.wsf""", "REG_SZ"
			TestAndLog SUCCESS, "Wrote Run registry key"
			On Error Goto 0

			' Allow execution to continue (assuming new Run item won't actually be run yet)

		End if

			
	End Sub
	
	Sub ExtendSMSTSLogSize
		
		Dim fSmsTSIni
		Set fSmsTSIni = oFSO.CreateTextFile(oEnv("SystemRoot") & "\smsts.ini", True)
		fSmsTSINI.Close
		TestAndLog SUCCESS, "Created SMSTS.INI file at " & oEnv("SystemRoot")
		oUtility.WriteIni oEnv("SystemRoot") & "\smsts.ini", "Logging", "LogMaxSize", "10000000" 
		oUtility.WriteIni oEnv("SystemRoot") & "\smsts.ini", "Logging", "LogMaxHistory", "1"

	End Sub

End Class

   </script>
</job>
