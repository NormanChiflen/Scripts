<job id="LTICleanup">
	<script language="VBScript" src="ZTIUtility.vbs"/>
	<script language="VBScript" src="ZTIBCDUtility.vbs"/>
	<script language="VBScript">

' // ***************************************************************************
' // 
' // Copyright (c) Microsoft Corporation.  All rights reserved.
' // 
' // Microsoft Deployment Toolkit Solution Accelerator
' //
' // File:      LTICleanup.wsf
' // 
' // Version:   5.1.1642.01
' // 
' // Purpose:   Clean up scripts, autologon, and other remnants of the
' //            deployment process.
' // 
' // Usage:     cscript.exe [//nologo] LTICleanup.wsf [/debug:true]
' // 
' // ***************************************************************************

Option Explicit
Dim oLTICleanup
Dim iScriptRC

If Not oUtility.Arguments.Exists("DebugCapture") Then
	On Error Resume Next
End If

Set oLTICleanup = New LTICleanup
TestAndFail SUCCESS, 10000, "Create object: Set oLTICleanup = New LTICleanup"

iScriptRc =  oLTICleanup.Main
If iScriptRc <> SUCCESS then
	'Do not call ProcessResults if the results were successful, oLTICleanup may have cleaned the log.
	ProcessResults iScriptRc
End if

Wscript.quit iScriptRc



'//----------------------------------------------------------------------------
'//  Main Class
'//----------------------------------------------------------------------------

Class LTICleanup

	'//----------------------------------------------------------------------------
	'//  Constructor to initialize needed global objects
	'//----------------------------------------------------------------------------

	Private Sub Class_Initialize

		If oEnvironment.Item("DestinationLogicalDrive") = "" Then
			TestAndFail oUtility.determinepartition, 7713, "Could not Determine Partition to deploy to"
		End If


	End Sub


	
	'//----------------------------------------------------------------------------
	'//  Main routine
	'//----------------------------------------------------------------------------

	Function Main
	
		Dim iRetVal, iRC
		Dim sCmd
		Dim arrDrives
		Dim i
		Dim sSystemDrive
		Dim sArchiveDir
		Dim oUnattend
		Dim oNode
		Dim sBootsect
		Dim bOEM
		Dim sproc
		Dim sBDDUtility



		' Get the deployment system drive
		sSystemDrive = "C:"
		For each oDrive in oFSO.Drives
			If oDrive.DriveType = 2 then
				If oDrive.IsReady Then
					If (oFSO.FolderExists(oDrive.DriveLetter & ":\Windows") or oFSO.FolderExists(oDrive.DriveLetter & ":\Winnt")) and oDrive.DriveLetter<>"X" then

						sSystemDrive = oDrive.DriveLetter & ":"
						Exit For

					End if
				End If
			End if
		Next

		bOEM = ucase(oEnvironment.Item("_DoNotCleanLiteTouch")) = "TRUE"

		' Figure out what directory to use

		If oEnvironment.Item("OSVersion") = "WinPE" then
			sArchiveDir = sSystemDrive & "\WINDOWS\TEMP"
		Else
			If sSystemDrive = oEnv("SystemDrive") then
				sArchiveDir = oEnv("SystemRoot") & "\TEMP"
			Else
				sArchiveDir = sSystemDrive & "\WINDOWS\TEMP"
			End if
		End if
		
		' Clean up Ramdisk entry
		If BCDObjectExistsNoOutput(BDD_RAMDISK_GUID) then
			RunBCDEdit "/delete " & BDD_RAMDISK_GUID & " /cleanup"
			oLogging.CreateEntry "Removing BCDEdit", LogTypeInfo
		End if 
		
		'//----------------------------------------------------------------------------
		'//  Clear the autologon registry keys
		'//----------------------------------------------------------------------------

		oLogging.CreateEntry "Removing AutoAdminLogon registry entries", LogTypeInfo

		On Error Resume Next
		oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\AutoAdminLogon", "0", "REG_SZ"
		oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\DefaultUserName", "", "REG_SZ"
		oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\DefaultDomainName", "", "REG_SZ"
		oShell.RegDelete "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\DefaultPassword"
		oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\AutoLogonCount", &H00000000, "REG_DWORD"
		On Error Goto 0


		'//----------------------------------------------------------------------------
		'//  Remove misc. folders
		'//----------------------------------------------------------------------------

		If not bOEM then
			If oFSO.FolderExists(sSystemDrive & "\Deploy") then
				RemoveFolder sSystemDrive & "\Deploy"
			End if
		End if

		'//----------------------------------------------------------------------------
		'//  Clean up the Windows PE image
		'//----------------------------------------------------------------------------

		If bOEM then

			oLogging.CreateEntry "No Windows PE image to delete (OEM Scenario).", LogTypeInfo

		Elseif oFSO.FileExists(sSystemDrive & "\sources\boot.wim") then

			' First remove the BOOT.WIM
			DeleteFile sSystemDrive & "\sources\boot.wim"


			' Now if the sources folder is empty, remove it too.

			If oFSO.GetFolder(sSystemDrive & "\sources").Files.Count = 0 and oFSO.GetFolder(sSystemDrive & "\sources").Subfolders.Count = 0 then
				RemoveFolder sSystemDrive & "\sources"
			Else
				oLogging.CreateEntry "The " & sSystemDrive & "\sources folder is not empty, not removing.", LogTypeInfo
			End if


			' Put an unattend.xml file into place to automate OOBE

			If oFSO.FileExists(sSystemDrive & "\minint\unattend.xml") and oFSO.FolderExists(sSystemDrive & "\windows\panther") then

				oLogging.CreateEntry "Stripping BDD commands from unattend.xml template.", LogTypeInfo


				' Load the unattend.xml

				Set oUnattend = oUtility.CreateXMLDOMObjectEx(sSystemDrive & "\minint\unattend.xml")


				' Strip out the AutoLogon and FirstLogonCommands

				Set oNode = oUnattend.selectSingleNode("//settings[@pass='oobeSystem']/component[@name='Microsoft-Windows-Shell-Setup']/AutoLogon")
				If not (oNode is Nothing) then
					oNode.parentNode.removeChild oNode
				End if

				Set oNode = oUnattend.selectSingleNode("//settings[@pass='oobeSystem']/component[@name='Microsoft-Windows-Shell-Setup']/FirstLogonCommands")
				If not (oNode is Nothing) then
					oNode.parentNode.removeChild oNode
				End if


				' Don't create the temporary account

				Set oNode = oUnattend.selectSingleNode("//settings[@pass='oobeSystem']/component[@name='Microsoft-Windows-Shell-Setup']/UserAccounts/LocalAccounts")
				If not (oNode is Nothing) then
					oNode.parentNode.removeChild oNode
				End if


				' Save the XML file

				oUnattend.Save sSystemDrive & "\windows\panther\unattend.xml"

				oLogging.CreateEntry "Modified unattend.xml saved to " & sSystemDrive & "\windows\panther\unattend.xml", LogTypeInfo

			End if


			If oFSO.FileExists(sSystemDrive & "\boot.ini") then  ' Apply the NT 5.2 boot sector so we boot back into XP

				' Install a boot sector

				iRc = oUtility.FindFile("bootsect.exe", sBootsect)
				TestAndLog iRC, "FindFile: BootSect.exe"
				If iRc = Success then

					oLogging.CreateEntry "Executing BOOTSECT.EXE to install a boot sector", LogTypeInfo
					iRc = oShell.Run("cmd.exe /c """"" & sBootsect & """ /nt52 c:""", 0, true)
					oLogging.CreateEntry "BOOTSECT.EXE return code = " & iRc, LogTypeInfo
					oLogging.CreateEntry "Boot sector updated, reboot is needed.", LogTypeInfo

				End if


				' Clean up c:\boot and bootmgr

				If oFSO.FolderExists(sSystemDrive & "\boot") then
					RemoveFolder sSystemDrive & "\Boot"
				End if
				If oFSO.FileExists(sSystemDrive & "\bootmgr") then
					oFSO.DeleteFile sSystemDrive & "\bootmgr"
				End if


				' If necessary, clean up the GuiRunOnce entry after capturing an image

				If oEnv("SystemDrive") = "X:" and oFSO.FileExists(sSystemDrive & "\sysprep\sysprep.inf") then

					On Error Resume Next
					oUtility.WriteIni sSystemDrive & "\sysprep\sysprep.inf", "GuiRunOnce", "", ""   ' Remove the section
					If Err then
						oLogging.CreateEntry "Unable to remove GuiRunOnce entry from sysprep.inf: " & Err.Description & " (" & Err.Number & ")", LogTypeInfo
					End if

					oUtility.WriteIni sSystemDrive & "\sysprep\sysprep.inf", "GuiUnattended", "AutoLogon", ""   ' Remove the item
					oUtility.WriteIni sSystemDrive & "\sysprep\sysprep.inf", "GuiUnattended", "AutoLogonCount", ""   ' Remove the item
					On Error Goto 0

				End if

			End if

		Else

			oLogging.CreateEntry "No Windows PE image to delete.", LogTypeInfo

		End if


		'//----------------------------------------------------------------------------
		'//  Unmap connections to deployment share
		'//----------------------------------------------------------------------------

		oLogging.CreateEntry "Checking mapped network drive.", LogTypeInfo

		'//On Error Resume Next
		Set arrDrives = oNetwork.EnumNetworkDrives
		TestAndLog Err = 0, "Enumerate Network Drives"

		For i = 0 to arrDrives.Count - 1 Step 2
				oLogging.CreateEntry "testing drive " & arrDrives.Item(i) & " mapped to " & arrDrives.Item(i+1), LogTypeInfo
			If Instr(1, arrDrives.Item(i+1), oEnvironment.Item("DeployRoot"), 1) > 0 then

				oLogging.CreateEntry "Disconnecting drive " & arrDrives.Item(i) & " mapped to " & arrDrives.Item(i+1), LogTypeInfo

				' RemoveNetworkDrive didn't work, so we'll use "NET USE"

				sCmd = "NET USE " & arrDrives.Item(i) & " /d /y"
				iRc = oShell.Run( sCmd, 0, true)
				TestAndLog iRC, "Run command: " & sCmd

			End if
		Next

		On Error Goto 0

		'//----------------------------------------------------------------------------
		'//  Clean up the MININT directory
		'//----------------------------------------------------------------------------

		If oFSO.FolderExists(oUtility.LocalRootPath) then
			Dim sTempFolder
			Const TempFolder = 2
			Set sTempFolder = oFSO.GetSpecialFolder(TempFolder)
			oLogging.CreateEntry "Cleaning up " & oUtility.LocalRootPath & " directory.", LogTypeInfo
			' Change the working directory
			oShell.CurrentDirectory = sTempFolder

			' If debugging, keep the VARIABLES.DAT.  Otherwise, delete it.

			If oLogging.Debug then

				If oFSO.FileExists(oUtility.LogPath & "\VARIABLES.save") then
					DeleteFile oUtility.LogPath & "\VARIABLES.save"
				End if

				MoveFile oUtility.LogPath & "\VARIABLES.DAT", oUtility.LogPath & "\VARIABLES.save"

				' Copy the Unattend.xml

				If oFSO.FileExists(oUtility.LocalRootPath & "\Unattend.xml") then
					CopyFile oUtility.LocalRootPath & "\Unattend.xml", sArchiveDir & "\DeploymentLogs\Unattend.xml", true
				End if


			Else

				If oFSO.FileExists(oUtility.LogPath & "\VARIABLES.DAT") then
					DeleteFile oUtility.LogPath & "\VARIABLES.DAT"
				End if

			End if
			For each oDrive in oFSO.Drives
				If oDrive.DriveType = 2 and oDrive.DriveLetter<>"X" then
					If oDrive.IsReady Then
						If OFSO.FolderExists(ODrive.DriveLetter & ":\_SMSTASKSEQUENCE") then
							On Error Resume Next
							oFSO.DeleteFolder oDrive.DriveLetter & ":\_SMSTASKSEQUENCE", true
							On Error Goto 0

							Exit For
						End if
					End If
				End if
			Next

			' Remove the tools and scripts directories

			oLogging.CreateEntry "Cleaning up TOOLS, SCRIPTS, and PACKAGES directories.", LogTypeInfo
			On Error Resume Next
			DeleteFile oUtility.LocalRootPath & "\unattend.xml"
			DeleteFile oUtility.LocalRootPath & "\unattend.txt"
			DeleteFile oUtility.LocalRootPath & "\TOOLS\x86\ts.xml"
			DeleteFile oUtility.LocalRootPath & "\TOOLS\x64\ts.xml"
			DeleteFile oUtility.LocalRootPath & "\TOOLS\x86\variables.dat"
			DeleteFile oUtility.LocalRootPath & "\TOOLS\x64\variables.dat"
			RemoveFolder oUtility.LocalRootPath & "\SCRIPTS"
			RemoveFolder oUtility.LocalRootPath & "\PACKAGES"
			RemoveFolder oUtility.LocalRootPath & "\TOOLS"



			' Copy the logs to \WINDOWS\TEMP\DeploymentLogs

			If oFSO.FolderExists(sArchiveDir & "\DeploymentLogs") then
				RemoveFolder sArchiveDir & "\DeploymentLogs"
			End if
			
			CopyFolder oUtility.LogPath, sArchiveDir & "\DeploymentLogs", true


			' Move the StateStore directory

			If oFSO.FolderExists(oUtility.LocalRootPath & "\StateStore") then

				If oFSO.FolderExists(sArchiveDir & "\StateStore") then
					On Error Resume Next
					oFSO.DeleteFolder sArchiveDir & "\StateStore"
					' Do not log error
					On Error Goto 0
				End if
				
				MoveFolder oUtility.LocalRootPath & "\StateStore", sArchiveDir & "\StateStore"
				
			End if


			' Remove the whole folder

			oLogging.CreateEntry "Removing " & oUtility.LocalRootPath & " folder (final log entry)", LogTypeInfo
			RemoveFolder oUtility.LocalRootPath

		Else
			oLogging.CreateEntry "WARNING - directory " & oUtility.LocalRootPath & " does not exist.", LogTypeInfo
		End if


		'//----------------------------------------------------------------------------
		'//  Remove misc. folders
		'//----------------------------------------------------------------------------

		If not bOEM then
			If oFSO.FolderExists(sSystemDrive & "\Deploy") then
				RemoveFolder sSystemDrive & "\Deploy"
			End if
		End if

		If oFSO.FolderExists(sSystemDrive & "\SMSTSLog") then
			RemoveFolder sSystemDrive & "\SMSTSLog"
		End if

		for each sProc in array("x86","x64")

			
			If oFSO.FileExists(oEnv("TEMP") & "\Tools\" & sProc & "\Microsoft.BDD.Utility.dll") then
				sBDDUtility = oEnv("TEMP") & "\Tools\" & sProc & "\Microsoft.BDD.Utility.dll"
			End if

			' Register the DLL

			oShell.Run "regsvr32.exe /u /s """ & sBDDUtility & """", 0, true ' Always returns 0 - Success

		next

		EnableSystemRestore

		Main = Success
		
	End function
	
	
	Function RemoveFolder(sPath)
		RemoveFolder = oFileHandling.RemoveFolderEx(sPath, oLogging.Debug)
	End Function
	
	Function DeleteFile(sFile)
		DeleteFile = oFileHandling.DeleteFileEx(sFile,oLogging.Debug)
	End function
	
	Function MoveFile(sFile,sDest)
		MoveFile = oFileHandling.MoveFileEx(sFile,sDest,oLogging.Debug)
	End function
	
	Function CopyFile(sFile,sDest, bOverwrite)
		CopyFile = oFileHandling.CopyFileEx(sFile,sDest, bOverwrite,oLogging.Debug)
	End function
	
	Function CopyFolder (sSource, sDest, bOverwrite)
		CopyFolder = oFileHandling.CopyFolderEx(sSource, sDest, bOverwrite,oLogging.Debug)
	End function
	
	Function MoveFolder (sSource, sDest ) 
		MoveFolder =  oFileHandling.MoveFolderEx(sSource, sDest,oLogging.Debug )
	End function 
	
	Function GetObject (sSource, sDest ) 
		GetObject =  oFileHandling.MoveFolderEx(sSource, sDest,oLogging.Debug )
	End function 
	
	Function EnableSystemRestore
		
		Dim iRetVal, oSRP
		On Error Resume Next
		Set oSRP = GetObject("winmgmts:\\.\root\default:SystemRestore")
		iRetVal = oSRP.Enable(oEnv("Systemdrive") & "\")
		On Error Goto 0
		EnableSystemRestore = iRetVal
		
	End Function
	
	Function BCDObjectExistsNoOutput ( sGUID )
		BCDObjectExistsNoOutput = false
		on error resume next
		oShell.Run "cmd.exe /c bcdedit.exe /enum " & sGUID & " > %temp%\bcdtest.txt", 0, True
		oShell.Run "cmd.exe /c bcdedit.exe /enum " & sGUID & " /V >> %temp%\bcdtest.txt", 0, True
		BCDObjectExistsNoOutput = instr(1,oFSO.OpenTextFile(oShell.ExpandEnvironmentStrings("%temp%\bcdtest.txt")).ReadAll,sGUID,vbTExtCompare) <> 0
		on error goto 0
	End function 

End class

	</script>
</job>
